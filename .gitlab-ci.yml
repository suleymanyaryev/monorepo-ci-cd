stages:
    - test
    - build
    - e2e-test
    - deploy

variables:
    BACKEND_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-backend:latest
    FRONTEND_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME-frontend:latest
    CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

backend-test:
    image: golang:1.17-buster
    stage: test
    variables:
        GOPATH: $CI_PROJECT_DIR/.go
        POSTGRES_USER: todo
        POSTGRES_PASSWORD: todo
        POSTGRES_DB: todo
        POSTGRES_HOST_AUTH_METHOD: trust
        DB_HOST: postgres
        DB_PORT: 5432
        DB_USER: todo
        DB_PASSWORD: todo
        DB_DATABASE: todo
    cache:
        paths:
            - .go/pkg/mod/

    services:
        - name: postgres:12-alpine
          alias: postgres

    before_script:
        - apt update
        - apt install -y postgresql-client
        - export PGPASSWORD=$POSTGRES_PASSWORD
        - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ./backend/db.sql
        - mkdir -p .go
    script:
        - cd backend
        - go mod download
        - go mod verify
        - go test -v ./...

frontend-test:
    image: node:14-alpine
    stage: test
    cache:
        key:
            files:
                - yarn.lock
        paths:
            - .yarn-cache/
    script:
        - cd frontend
        - yarn install --cache-folder .yarn-cache
        - yarn test:unit

backend-build:
    image: docker:latest
    stage: build
    needs: ["backend-test"]
    services:
        - docker:dind
    before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
        - docker pull $BACKEND_LATEST
    script:
        - docker build --cache-from $BACKEND_LATEST --tag $BACKEND_LATEST --target prod ./backend
        - docker push $BACKEND_LATEST

frontend-build:
    image: docker:latest
    stage: build
    needs: ["frontend-test"]
    services:
        - docker:dind
    before_script:
        - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
        - docker pull $FRONTEND_LATEST
    script:
        - docker build --cache-from $FRONTEND_LATEST --tag $FRONTEND_LATEST --target prod ./frontend
        - docker push $FRONTEND_LATEST

e2e-test:
    image: cypress/browsers:node14.17.0-chrome88-ff89
    cache:
        key: ${CI_COMMIT_REF_SLUG}
        paths:
            - cache/Cypress
            - node_modules

    services:
        - name: ${BACKEND_LATEST}
          alias: backend

        - name: ${FRONTEND_LATEST}
          alias: frontend

        - name: postgres:12-alpine
          alias: postgres

    variables:
        FF_NETWORK_PER_BUILD: 1
        LISTEN_ADDR: "127.0.0.1:8080"
        BACKEND_URL: http://backend
        NGINX_PORT: 5050
        CYPRESS_BASE_URL: http://frontend:5050
        CYPRESS_PGDATABASE: "todo"
        CYPRESS_PGHOST: postgres
        CYPRESS_PGPORT: 5432
        CYPRESS_PGUSER: "todo"
        CYPRESS_PGPASSWORD: "todo"
        POSTGRES_USER: todo
        POSTGRES_PASSWORD: todo
        POSTGRES_DB: todo
        POSTGRES_HOST_AUTH_METHOD: trust

    stage: e2e-test
    needs: ["backend-build", "frontend-build"]

    before_script:
        - apt update
        - apt install -y postgresql-client
        - export PGPASSWORD=$POSTGRES_PASSWORD
        - psql -h "postgres" -U "$POSTGRES_USER" -d "$POSTGRES_DB" -f ./backend/db.sql

    script:
        - yarn install --frozen-lockfile
        - npx cypress cache path
        - npx cypress cache list
        - yarn cy:run

deploy:
    image: alpine:latest
    stage: deploy

    script:
        - echo "Deploying"
